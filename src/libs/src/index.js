/**
 * fast-cards
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BlackCard from './model/BlackCard';
import CardsAgainstHumanityPlayer from './model/CardsAgainstHumanityPlayer';
import DeckMetaData from './model/DeckMetaData';
import GamePreferences from './model/GamePreferences';
import GameStateMachine from './model/GameStateMachine';
import GameStatePlayerView from './model/GameStatePlayerView';
import HTTPValidationError from './model/HTTPValidationError';
import LastWinnerInfo from './model/LastWinnerInfo';
import LoginCheckResponse from './model/LoginCheckResponse';
import LoginFailureMessage from './model/LoginFailureMessage';
import PlayerOutsideView from './model/PlayerOutsideView';
import Room from './model/Room';
import RoomListing from './model/RoomListing';
import SelectWinningSubmission from './model/SelectWinningSubmission';
import Submission from './model/Submission';
import TokenResponse from './model/TokenResponse';
import User from './model/User';
import UserLoginSchema from './model/UserLoginSchema';
import UserSchema from './model/UserSchema';
import ValidationError from './model/ValidationError';
import WhiteCard from './model/WhiteCard';
import AuthApi from './api/AuthApi';
import CardsApi from './api/CardsApi';
import CardsAgainstApi from './api/CardsAgainstApi';
import UserApi from './api/UserApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FastCards = require('index'); // See note below*.
* var xxxSvc = new FastCards.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FastCards.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FastCards.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FastCards.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BlackCard model constructor.
     * @property {module:model/BlackCard}
     */
    BlackCard,

    /**
     * The CardsAgainstHumanityPlayer model constructor.
     * @property {module:model/CardsAgainstHumanityPlayer}
     */
    CardsAgainstHumanityPlayer,

    /**
     * The DeckMetaData model constructor.
     * @property {module:model/DeckMetaData}
     */
    DeckMetaData,

    /**
     * The GamePreferences model constructor.
     * @property {module:model/GamePreferences}
     */
    GamePreferences,

    /**
     * The GameStateMachine model constructor.
     * @property {module:model/GameStateMachine}
     */
    GameStateMachine,

    /**
     * The GameStatePlayerView model constructor.
     * @property {module:model/GameStatePlayerView}
     */
    GameStatePlayerView,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The LastWinnerInfo model constructor.
     * @property {module:model/LastWinnerInfo}
     */
    LastWinnerInfo,

    /**
     * The LoginCheckResponse model constructor.
     * @property {module:model/LoginCheckResponse}
     */
    LoginCheckResponse,

    /**
     * The LoginFailureMessage model constructor.
     * @property {module:model/LoginFailureMessage}
     */
    LoginFailureMessage,

    /**
     * The PlayerOutsideView model constructor.
     * @property {module:model/PlayerOutsideView}
     */
    PlayerOutsideView,

    /**
     * The Room model constructor.
     * @property {module:model/Room}
     */
    Room,

    /**
     * The RoomListing model constructor.
     * @property {module:model/RoomListing}
     */
    RoomListing,

    /**
     * The SelectWinningSubmission model constructor.
     * @property {module:model/SelectWinningSubmission}
     */
    SelectWinningSubmission,

    /**
     * The Submission model constructor.
     * @property {module:model/Submission}
     */
    Submission,

    /**
     * The TokenResponse model constructor.
     * @property {module:model/TokenResponse}
     */
    TokenResponse,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserLoginSchema model constructor.
     * @property {module:model/UserLoginSchema}
     */
    UserLoginSchema,

    /**
     * The UserSchema model constructor.
     * @property {module:model/UserSchema}
     */
    UserSchema,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The WhiteCard model constructor.
     * @property {module:model/WhiteCard}
     */
    WhiteCard,

    /**
    * The AuthApi service constructor.
    * @property {module:api/AuthApi}
    */
    AuthApi,

    /**
    * The CardsApi service constructor.
    * @property {module:api/CardsApi}
    */
    CardsApi,

    /**
    * The CardsAgainstApi service constructor.
    * @property {module:api/CardsAgainstApi}
    */
    CardsAgainstApi,

    /**
    * The UserApi service constructor.
    * @property {module:api/UserApi}
    */
    UserApi
};
