/**
 * fast-cards
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import LoginFailureMessage from '../model/LoginFailureMessage';
import TokenResponse from '../model/TokenResponse';
import UserLoginSchema from '../model/UserLoginSchema';
import UserSchema from '../model/UserSchema';

/**
* User service.
* @module api/UserApi
* @version 0.2.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUserAuthSignupPost operation.
     * @callback module:api/UserApi~createUserAuthSignupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * @param {module:model/UserSchema} userSchema 
     * @param {module:api/UserApi~createUserAuthSignupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    createUserAuthSignupPost(userSchema, callback) {
      let postBody = userSchema;
      // verify the required parameter 'userSchema' is set
      if (userSchema === undefined || userSchema === null) {
        throw new Error("Missing the required parameter 'userSchema' when calling createUserAuthSignupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/auth/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLoginAuthLoginPost operation.
     * @callback module:api/UserApi~userLoginAuthLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Login
     * @param {module:model/UserLoginSchema} userLoginSchema 
     * @param {module:api/UserApi~userLoginAuthLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    userLoginAuthLoginPost(userLoginSchema, callback) {
      let postBody = userLoginSchema;
      // verify the required parameter 'userLoginSchema' is set
      if (userLoginSchema === undefined || userLoginSchema === null) {
        throw new Error("Missing the required parameter 'userLoginSchema' when calling userLoginAuthLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
