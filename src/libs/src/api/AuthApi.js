/**
 * fast-cards
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import LoginCheckResponse from '../model/LoginCheckResponse';
import LoginFailureMessage from '../model/LoginFailureMessage';
import TokenResponse from '../model/TokenResponse';
import User from '../model/User';
import UserLoginSchema from '../model/UserLoginSchema';
import UserSchema from '../model/UserSchema';

/**
* Auth service.
* @module api/AuthApi
* @version 0.2.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUserAuthSignupPost operation.
     * @callback module:api/AuthApi~createUserAuthSignupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * @param {module:model/UserSchema} userSchema 
     * @param {module:api/AuthApi~createUserAuthSignupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    createUserAuthSignupPost(userSchema, callback) {
      let postBody = userSchema;
      // verify the required parameter 'userSchema' is set
      if (userSchema === undefined || userSchema === null) {
        throw new Error("Missing the required parameter 'userSchema' when calling createUserAuthSignupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/auth/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isMyLoginValidAuthIsMyLoginValidGet operation.
     * @callback module:api/AuthApi~isMyLoginValidAuthIsMyLoginValidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Is My Login Valid
     * @param {module:api/AuthApi~isMyLoginValidAuthIsMyLoginValidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginCheckResponse}
     */
    isMyLoginValidAuthIsMyLoginValidGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginCheckResponse;
      return this.apiClient.callApi(
        '/auth/is_my_login_valid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUserAuthUsersUserIdGet operation.
     * @callback module:api/AuthApi~readUserAuthUsersUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read User
     * @param {Number} userId 
     * @param {module:api/AuthApi~readUserAuthUsersUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    readUserAuthUsersUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling readUserAuthUsersUserIdGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readUsersAuthGet operation.
     * @callback module:api/AuthApi~readUsersAuthGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read Users
     * @param {String} xToken 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to 0)
     * @param {Number} opts.limit  (default to 100)
     * @param {module:api/AuthApi~readUsersAuthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSchema>}
     */
    readUsersAuthGet(xToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xToken' is set
      if (xToken === undefined || xToken === null) {
        throw new Error("Missing the required parameter 'xToken' when calling readUsersAuthGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
        'x-token': xToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSchema];
      return this.apiClient.callApi(
        '/auth/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLoginAuthLoginPost operation.
     * @callback module:api/AuthApi~userLoginAuthLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Login
     * @param {module:model/UserLoginSchema} userLoginSchema 
     * @param {module:api/AuthApi~userLoginAuthLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    userLoginAuthLoginPost(userLoginSchema, callback) {
      let postBody = userLoginSchema;
      // verify the required parameter 'userLoginSchema' is set
      if (userLoginSchema === undefined || userLoginSchema === null) {
        throw new Error("Missing the required parameter 'userLoginSchema' when calling userLoginAuthLoginPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
